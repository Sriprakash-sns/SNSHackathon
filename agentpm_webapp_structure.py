# AgentPM Web App

This is a full-stack web application simulating an Agentic AI Product Manager using React (frontend) and FastAPI (backend).

---

## ðŸ§° Tech Stack

- **Frontend**: React + Vite + TailwindCSS
- **Backend**: FastAPI (Python 3.10+)
- **Agents**: Modular AI agents for PM tasks
- **LLM**: OpenAI GPT-4o (via API)
- **Storage**: PostgreSQL, FAISS (for vector search)
- **Orchestration**: CrewAI (planned for end-to-end agent flow)
- **Deployment**: Docker + Docker Compose

---

## ðŸ“¦ Project Structure

```
project-root/
â”œâ”€â”€ backend/
â”‚   â””â”€â”€ app/
â”‚       â”œâ”€â”€ shared_utils/            # Shared logic across agents
â”‚       â”œâ”€â”€ agents/
â”‚       â”‚   â”œâ”€â”€ talent_acquisition/
â”‚       â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚       â”‚   â”‚   â”œâ”€â”€ agent.py
â”‚       â”‚   â”‚   â”œâ”€â”€ utils.py
â”‚       â”‚   â”‚   â””â”€â”€ prompts.py
â”‚       â”‚   â”œâ”€â”€ roadmap_planning/
â”‚       â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚       â”‚   â”‚   â”œâ”€â”€ agent.py
â”‚       â”‚   â”‚   â”œâ”€â”€ utils.py
â”‚       â”‚   â”‚   â””â”€â”€ prompts.py
â”‚       â”‚   â”œâ”€â”€ progress_monitoring/
â”‚       â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚       â”‚   â”‚   â”œâ”€â”€ agent.py
â”‚       â”‚   â”‚   â”œâ”€â”€ utils.py
â”‚       â”‚   â”‚   â””â”€â”€ prompts.py
â”‚       â”‚   â”œâ”€â”€ gtm_strategy/
â”‚       â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚       â”‚   â”‚   â”œâ”€â”€ agent.py
â”‚       â”‚   â”‚   â”œâ”€â”€ utils.py
â”‚       â”‚   â”‚   â””â”€â”€ prompts.py
â”‚       â”‚   â”œâ”€â”€ sales_feedback/
â”‚       â”‚   â”‚   â”œâ”€â”€ __init__.py
â”‚       â”‚   â”‚   â”œâ”€â”€ agent.py
â”‚       â”‚   â”‚   â”œâ”€â”€ utils.py
â”‚       â”‚   â”‚   â””â”€â”€ prompts.py
â”‚       â”œâ”€â”€ orchestration/
â”‚       â”‚   â””â”€â”€ orchestrator.py           # CrewAI orchestration entrypoint
â”‚       â”œâ”€â”€ tests/
â”‚       â”‚   â”œâ”€â”€ conftest.py              # Shared test fixtures and mocks
â”‚       â”‚   â”œâ”€â”€ test_talent.py
â”‚       â”‚   â”œâ”€â”€ test_roadmap.py
â”‚       â”‚   â”œâ”€â”€ test_progress.py
â”‚       â”‚   â”œâ”€â”€ test_gtm.py
â”‚       â”‚   â””â”€â”€ test_feedback.py
â”‚       â””â”€â”€ mock_data/
â”‚           â”œâ”€â”€ resumes.json
â”‚           â”œâ”€â”€ jd_sample.txt
â”‚           â”œâ”€â”€ feedback.csv
â”‚           â”œâ”€â”€ features.json
â”‚           â”œâ”€â”€ reviews.json
â”œâ”€â”€ frontend/
â”‚   â”œâ”€â”€ public/
â”‚   â”œâ”€â”€ src/
â”‚   â”‚   â”œâ”€â”€ App.jsx
â”‚   â”‚   â”œâ”€â”€ main.jsx
â”‚   â”‚   â”œâ”€â”€ components/
â”‚   â”‚   â”‚   â”œâ”€â”€ Dashboard.jsx
â”‚   â”‚   â”‚   â”œâ”€â”€ TalentAgent.jsx
â”‚   â”‚   â”‚   â”œâ”€â”€ RoadmapAgent.jsx
â”‚   â”‚   â”‚   â”œâ”€â”€ ProgressAgent.jsx
â”‚   â”‚   â”‚   â”œâ”€â”€ GTMAgent.jsx
â”‚   â”‚   â”‚   â””â”€â”€ FeedbackAgent.jsx
â”‚   â”‚   â”œâ”€â”€ pages/
â”‚   â”‚   â”‚   â”œâ”€â”€ Home.jsx
â”‚   â”‚   â”‚   â”œâ”€â”€ Talent.jsx
â”‚   â”‚   â”‚   â”œâ”€â”€ Roadmap.jsx
â”‚   â”‚   â”‚   â”œâ”€â”€ Progress.jsx
â”‚   â”‚   â”‚   â”œâ”€â”€ GTM.jsx
â”‚   â”‚   â”‚   â””â”€â”€ Feedback.jsx
â”‚   â”‚   â”œâ”€â”€ api/
â”‚   â”‚   â”‚   â”œâ”€â”€ axios.js
â”‚   â”‚   â”‚   â””â”€â”€ apiClient.js            # Centralized client with interceptors
â”‚   â”‚   â”‚   â””â”€â”€ axios.js
â”‚   â”‚   â””â”€â”€ styles/
â”‚   â”‚       â””â”€â”€ index.css
â”‚   â”œâ”€â”€ tailwind.config.js
â”‚   â”œâ”€â”€ postcss.config.js
â”‚   â”œâ”€â”€ index.html
â”‚   â””â”€â”€ package.json
â”œâ”€â”€ docker-compose.yml
â”œâ”€â”€ README.md
```

...

## ðŸ§  AI + Orchestration

Agents are currently modular and a unified orchestration runtime is scaffolded under `orchestration/orchestrator.py`.

### CrewAI Integration (Planned)
We will use **CrewAI** to coordinate:
- Task routing across agents
- Multi-agent memory and tool use
- Dynamic delegation and follow-ups

This will simulate real-world Product Manager workflows from hiring to post-launch feedback.

### Sample Orchestrator Template (WIP)
```python
# backend/app/orchestration/orchestrator.py
try:
    from crewai import Crew, Task, Agent
except ImportError:
    raise ImportError("Please install crewai to run orchestration: pip install crewai")

import json

# Load agent definitions from config (example: JSON file or Python dict)
with open('backend/app/orchestration/agent_config.json', 'r') as f:
    agent_data = json.load(f)

def create_agent(entry):
    return Agent(name=entry['name'], goal=entry['goal'])

def create_task(agent, description):
    return Task(agent=agent, description=description)

# Build agents and tasks from config
agents = [create_agent(a) for a in agent_data['agents']]
tasks = [create_task(agents[i], t) for i, t in enumerate(agent_data['tasks'])]

# Initialize the crew
pm_crew = Crew(agents=agents, tasks=tasks)

# Run the orchestration
if __name__ == '__main__':
    pm_crew.kickoff()
```
if __name__ == '__main__':
    pm_crew.kickoff()
```

...
